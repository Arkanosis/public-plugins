// Generated by CoffeeScript 2.3.1
(function() {
  // Copyright [1999-2015] Wellcome Trust Sanger Institute and the EMBL-European Bioinformatics Institute
  // Copyright [2016-2018] EMBL-European Bioinformatics Institute

  // Licensed under the Apache License, Version 2.0 (the "License");
  // you may not use this file except in compliance with the License.
  // You may obtain a copy of the License at

  //     http://www.apache.org/licenses/LICENSE-2.0

  // Unless required by applicable law or agreed to in writing, software
  // distributed under the License is distributed on an "AS IS" BASIS,
  // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  // See the License for the specific language governing permissions and
  // limitations under the License.

  var Hub, Renderer, Request, SearchTableState, _clone_array, _clone_object, _kv_copy, add_extra_constraints, all_requests, better_boost, body_cache, body_elevate_crossspecies, body_elevate_quoted, body_embeded_species, body_frontpage_specials, body_hgvs_names, body_highlights, body_quicklinks, body_raw_request, body_requests, body_restrict_categories, body_split_favs, code_select, current_update_seq, dispatch_all_requests, dispatch_draw_main, dispatch_facet_request, dispatch_main_requests, double_trap, draw_main_requests, each_block, generate_block_list, rate_limiter, remote_log, run_all_prepares, size_cache, size_cache_q, stringify_params, traditional_boost, xhr_idx;

  code_select = function() {
    return $('#solr_config').length > 0;
  };

  _kv_copy = function(old) {
    var k, out, v;
    out = {};
    for (k in old) {
      v = old[k];
      out[k] = v;
    }
    return out;
  };

  _clone_array = function(a) {
    return $.extend(true, [], a);
  };

  _clone_object = function(a) {
    return $.extend(true, {}, a);
  };

  Hub = (function() {
    var _params_used, _section_keys, _style_map;

    class Hub {
      _decode(s) {
        return decodeURIComponent(s.replace(/\+/g, " "));
      }

      _encode(s) {
        return encodeURIComponent(s).replace(/\ /g, "+");
      }

      constructor(more) {
        var config_url;
        config_url = `${$('#species_path').val()}/Ajax/config`;
        this.ga_init();
        $.when($.solr_config({
          url: config_url
        }), $.getScript('/pure/pure.js')).done(() => {
          this.params = {};
          this.sections = {};
          this.interest = {};
          this.first_service = 1;
          this.source = new Request(this);
          this.renderer = new Renderer(this, this.source);
          $(window).bind('popstate', ((e) => {
            return this.service();
          }));
          $(document).ajaxError(() => {
            return this.fail();
          });
          this.spin = 0;
          this.leaving = 0;
          $(window).unload(function() {
            return this.leaving = 1;
          });
          $(document).on('force_state_change', () => {
            return $(document).trigger('state_change', [this.params]);
          });
          return more(this);
        });
      }

      ga_init() {
        if (Ensembl.GA) {
          return this.ga = new Ensembl.GA.EventConfig({
            category: (function() {
              return this.category;
            }),
            action: (function() {
              return this.action;
            }),
            label: (function() {
              return this.label;
            }),
            value: (function() {
              return this.value;
            }),
            nonInteraction: false
          });
        }
      }

      code_select() {
        return code_select;
      }

      spin_up() {
        if (this.spin === 0) {
          $('.hub_fail').hide();
          $('.hub_spinner').show();
        }
        return this.spin += 1;
      }

      spin_down() {
        if (this.spin > 0) {
          this.spin -= 1;
        }
        if (this.spin === 0) {
          return $('.hub_spinner').hide();
        }
      }

      fail() {
        if (this.leaving) { // don't show failed during click away
          return;
        }
        return $('.hub_spinner').hide();
      }

      //$('.hub_fail').show()
      unfail() {
        $('.hub_fail').hide();
        if (this.spin) {
          return $('.hub_spinner').show();
        }
      }

      register_interest(key, fn) {
        var base1;
        if ((base1 = this.interest)[key] == null) {
          base1[key] = [];
        }
        return this.interest[key].push(fn);
      }

      activate_interest(key, value) {
        var l, len1, ref, ref1, results1, w;
        ref1 = (ref = this.interest[key]) != null ? ref : [];
        results1 = [];
        for (l = 0, len1 = ref1.length; l < len1; l++) {
          w = ref1[l];
          results1.push(w.call(this, key));
        }
        return results1;
      }

      render_stage(more) {
        this.set_templates(this.layout());
        if (this.useless_browser()) {
          $('#solr_content').addClass('solr_useless_browser');
        }
        $(document).on('update_state', (e, qps) => {
          return this.update_url(qps);
        });
        $(document).on('ga', (e, category, action, label = '', value = 1) => {
          if (!this.ga || !Ensembl.GA) {
            return;
          }
          return Ensembl.GA.sendEvent(this.ga, {category, action, label, value});
        });
        $(document).on('update_state_incr', (e, qps) => {
          return rate_limiter(qps).then((data) => {
            return this.update_url(data);
          });
        });
        return this.renderer.render_stage(more);
      }

      _add_changed(changed, k) {
        var a, l, len1, ref;
        if (_params_used[k]) {
          ref = _params_used[k];
          for (l = 0, len1 = ref.length; l < len1; l++) {
            a = ref[l];
            changed[a] = 1;
          }
        }
        return changed[k] = 1;
      }

      set_templates(style) {
        var k, src;
        this.cstyle = style;
        src = _style_map[style];
        return this.tmpl = new window.Templates((function() {
          var l, len1, ref, results1;
          results1 = [];
          for (l = 0, len1 = src.length; l < len1; l++) {
            k = src[l];
            results1.push((ref = window[k + "_templates"]) != null ? ref : window[k]);
          }
          return results1;
        })());
      }

      templates() {
        return this.tmpl;
      }

      add_implicit_params() {
        var any, hub;
        hub = this;
        any = 0;
        $('#solr_context span').each(function() {
          var j;
          j = $(this);
          if (j.text() && (hub.params[this.id] == null)) {
            hub.params[this.id] = j.text();
            any = 1;
          }
          return j.remove();
        });
        return any;
      }

      refresh_params() {
        var a, b, changed, k, m, match, old_params, old_sections, p, param_source, ref, ref1, ref2, section, v, x;
        changed = {};
        old_params = _kv_copy(this.params);
        old_sections = {};
        for (x in this.sections) {
          old_sections[x] = _kv_copy(this.sections[x]);
        }
        this.params = {};
        this.sections = {};
        this._pair.lastIndex = 0;
        if (window.location.hash.indexOf('=') !== -1) {
          param_source = window.location.hash.substring(1);
        } else {
          param_source = window.location.search.substring(1);
        }
        while (m = this._pair.exec(param_source)) {
          this.params[this._decode(m[1])] = this._decode(m[2]);
        }
        if (this.add_implicit_params()) {
          this.replace_url({});
        }
        this.ddg_style_search();
        for (section in _section_keys) {
          match = _section_keys[section];
          match.lastIndex = 0;
          this.sections[section] = {};
          for (p in this.params) {
            if (m = match.exec(p)) {
              this.sections[section][m[1]] = this.params[p];
            }
          }
        }
        for (k in old_params) {
          v = old_params[k];
          if (this.params[k] !== old_params[k]) {
            this._add_changed(changed, k);
          }
        }
        ref = this.params;
        for (k in ref) {
          v = ref[k];
          if (this.params[k] !== old_params[k]) {
            this._add_changed(changed, k);
          }
        }
        for (section in _section_keys) {
          a = (ref1 = this.sections[section]) != null ? ref1 : {};
          b = (ref2 = old_sections[section]) != null ? ref2 : {};
          for (k in a) {
            v = a[k];
            if (a[k] !== b[k]) {
              this._add_changed(changed, section);
            }
          }
          for (k in b) {
            v = b[k];
            if (a[k] !== b[k]) {
              this._add_changed(changed, section);
            }
          }
        }
        return changed;
      }

      remove_unused_params() {
        var changed, k, l, len1, ref, v;
        changed = {};
        ref = ['species', 'idx'];
        for (l = 0, len1 = ref.length; l < len1; l++) {
          k = ref[l];
          if (this.params[k] != null) {
            changed[k] = void 0;
          }
        }
        if (((function() {
          var results1;
          results1 = [];
          for (k in changed) {
            v = changed[k];
            results1.push(k);
          }
          return results1;
        })()).length) {
          return this.replace_url(changed);
        }
      }

      layout() {
        var ref;
        return (ref = this.params.style) != null ? ref : 'standard';
      }

      query() {
        return this.params['q'];
      }

      species() {
        var ref;
        return (ref = this.params['species']) != null ? ref : '';
      }

      sort() {
        return this.params['sort'];
      }

      page() {
        if (this.params['page'] != null) {
          return parseInt(this.params['page']);
        } else {
          return 1;
        }
      }

      per_page() {
        var ref;
        return parseInt((ref = this.params['perpage']) != null ? ref : $.solr_config('static.ui.per_page'));
      }

      fall(type) {
        return this.sections['fall'][type] != null;
      }

      base() {
        return this.config('base')['url'];
      }

      columns() {
        if (this.params['columns']) {
          return this.params['columns'].split('*');
        } else {
          return $.solr_config('static.ui.columns');
        }
      }

      fix_species_url(url, actions) {
        var base, main, parts, pos, repl;
        base = '';
        main = url.replace(/^(https?\:\/\/[^\/]+)/, (function(g0, g1) {
          base = g1;
          return '';
        }));
        if (main.length === 0 || main.charAt(0) !== '/') {
          return url;
        }
        parts = main.split('/');
        for (pos in actions) {
          repl = actions[pos];
          parts[parseInt(pos) + 1] = repl;
        }
        main = parts.join('/');
        return base + main;
      }

      make_url(qps) {
        var a, b, species, url;
        url = window.location.href.replace(/\?.*$/, "") + "?";
        url += ((function() {
          var results1;
          results1 = [];
          for (a in qps) {
            b = qps[a];
            results1.push(`${this._encode(a)}=${this._encode(b)}`);
          }
          return results1;
        }).call(this)).join(';');
        // Species fix XXX make more generic
        species = 'Multi';
        if ((qps['facet_species'] != null) && qps['facet_species'] !== 'CrossSpecies') {
          species = qps['facet_species'];
        }
        url = this.fix_species_url(url, {
          0: species
        });
        return url;
      }

      fake_history() {
        return !(window.history && window.history.pushState);
      }

      set_hash(v) {
        var w;
        w = window.location;
        if (v.length) {
          return w.hash = v;
        } else {
          return w.href = w.href.substr(0, w.href.indexOf('#') + 1);
        }
      }

      fake_history_onload() {
        if (this.fake_history()) {
          // Transfer any QPs into a hash via reload.
          this.set_hash(window.location.search.substring(1));
          if (!(window.location.search.length > 1)) {
            // Bug in hash rewriting code when no params, so insert fake one
            return window.location.search = 'p=1';
          }
        } else if (window.location.href.indexOf('#') !== -1) {
          return this.set_hash('');
        }
      }

      update_url(changes, service = 1) {
        var k, qps, url, v;
        qps = _kv_copy(this.params);
        if ((qps.perpage != null) && parseInt(qps.perpage) === 0) {
          qps.perpage = $.solr_config('static.ui.pagesizes')[0];
        }
        for (k in changes) {
          v = changes[k];
          if (v != null) {
            qps[k] = v;
          }
        }
        for (k in changes) {
          v = changes[k];
          if (!v) {
            delete qps[k];
          }
        }
        url = this.make_url(qps);
        if (this.really_useless_browser()) {
          window.location.hash = url.substring(url.indexOf('?') + 1);
        } else {
          if (this.fake_history()) {
            window.location.hash = url.substring(url.indexOf('?') + 1);
          } else {
            window.history.pushState({}, '', url);
          }
        }
        if (service) {
          this.service();
        }
        return url;
      }

      replace_url(changes) {
        var k, qps, url, v;
        qps = _kv_copy(this.params);
        for (k in changes) {
          v = changes[k];
          if (v != null) {
            qps[k] = v;
          }
        }
        for (k in changes) {
          v = changes[k];
          if (!v) {
            delete qps[k];
          }
        }
        url = this.make_url(qps);
        if (this.really_useless_browser()) {
          window.location.hash = url.substring(url.indexOf('?') + 1);
        } else {
          if (this.fake_history()) {
            window.location.hash = url.substring(url.indexOf('?') + 1);
          } else {
            window.history.replaceState({}, '', url);
          }
        }
        return url;
      }

      sidebar_div() {
        return $('#solr_sidebar');
      }

      useless_browser() { // IE8--, too daft for fancy bits (preview, etc)
        if ((document.documentMode != null) && document.documentMode < 9) {
          return true; // IE8 or IE9 in an emulation mode
        }
        return this.really_useless_browser();
      }

      really_useless_browser() { // IE7--, too daft for URL manipulation, &c
        if ($('body').hasClass('ie67')) {
          return true;
        }
        return false;
      }

      config(key) {
        var ref;
        if (this.configs[key] == null) {
          this.configs[key] = $.parseJSON((ref = $(`#solr_config span.${key}`).text()) != null ? ref : '{}');
        }
        return this.configs[key];
      }

      request() {
        return this.source;
      }

      current_facets() {
        var k, out, ref, v;
        out = {};
        ref = this.sections['facet'];
        for (k in ref) {
          v = ref[k];
          if (v) {
            out[k] = v;
          }
        }
        return out;
      }

      ddg_style_search() {
        var code, ddg, key, map, ref, results1;
        if (this.params.species) { // Detect off-page submissions. Ugh! XXX
          delete this.params.species;
          ddg = [];
          this.params.q = this.params.q.replace(/!([a-z]+)/g, function(g0, g1) {
            ddg.push(g1);
            return '';
          });
          ref = $.solr_config('static.ui.ddg_codes');
          results1 = [];
          for (key in ref) {
            map = ref[key];
            results1.push((function() {
              var l, len1, results2;
              results2 = [];
              for (l = 0, len1 = ddg.length; l < len1; l++) {
                code = ddg[l];
                if (map[code] != null) {
                  results2.push(this.params[key] = map[code]);
                } else {
                  results2.push(void 0);
                }
              }
              return results2;
            }).call(this));
          }
          return results1;
        }
      }

      service() {
        var changed, request;
        if (this.first_service) {
          if (document.documentMode && document.documentMode < 8) {
            $('body').addClass('ie67'); // IE8+ in dumb mode
          }
          this.fake_history_onload();
        }
        changed = this.refresh_params();
        this.ddg_style_search();
        this.remove_unused_params();
        request = this.request();
        if (this.first_service) {
          if (parseInt(this.params.perpage) === 0) { // Override "all" on first load
            this.replace_url({
              perpage: 10
            });
            this.params.perpage = $.solr_config('static.ui.pagesizes')[0];
          }
          this.render_stage(() => {
            return this.actions(request, changed);
          });
          return this.first_service = 0;
        } else {
          return this.actions(request, changed);
        }
      }

      actions(request, changed) {
        var k, v;
        if (changed['results']) {
          this.renderer.render_results();
        }
        if (changed['style']) {
          if (this.cstyle !== this.params.style) {
            window.location.href = this.make_url(this.params);
          }
        }
        this.fix_species_search();
        for (k in changed) {
          v = changed[k];
          this.activate_interest(k);
        }
        $(document).trigger('state_change', [this.params]);
        return $(window).scrollTop(0);
      }

      fix_species_search() {
        var $menu, $spec;
        if (!$.solr_config('static.ui.topright_fix')) {
          return;
        }
        if (this.params.facet_species) {
          if (!$('.site_menu .ensembl').length) {
            $menu = $('.site_menu');
            $menu.prepend($menu.find('.ensembl_all').clone(true).addClass('ensembl').removeClass('ensembl_all'));
          }
          $spec = $('.site_menu .ensembl');
          return window.sp_names(this.params.facet_species, (names) => {
            var $img, $input;
            if (!names) {
              return;
            }
            $img = $('img', $spec).attr("src", `/i/species/${names.url}.png`);
            $input = $('input', $spec).val(`Search ${this.params.facet_species}…`);
            $spec.empty().append($img).append(`Search ${this.params.facet_species}`).append($input);
            $spec.trigger('click'); // update box via SeachPanel
            return $spec.parents('form').attr('action', `/${this.params.facet_species}/psychic`);
          });
        } else {
          $('.site_menu .ensembl').remove();
          $('.site_menu .ensembl_all').trigger('click'); // Update box via SearchPanel
          return $('.site_menu').parents('form').attr('action', "/Multi/psychic");
        }
      }

    };

    Hub.prototype._pair = /([^;&=]+)=?([^;&]*)/g;

    _params_used = {
      q: ['results'],
      page: ['results'],
      perpage: ['results'],
      sort: ['results'],
      species: ['results'],
      facet: ['results', 'species'],
      columns: ['results'],
      style: ['style']
    };

    _section_keys = {
      facet: /^facet_(.*)/,
      fall: /^fall_(.*)/
    };

    _style_map = {
      'standard': ['page', 'fixes', 'table', 'google', 'pedestrian', 'rhs'],
      'table': ['page', 'fixes', 'table', 'pedestrian', 'rhs']
    };

    Hub.prototype.configs = {};

    return Hub;

  }).call(this);

  // XXX protect page in rerequest
  // XXX clear and spin during rerequest
  // XXX no results

  // XXX local sort
  // Send queries
  // XXX more generic cache

  // XXX when failure
  each_block = function(num, fn) {
    var i, l, ref, requests;
    requests = [];
    for (i = l = 0, ref = num; (0 <= ref ? l < ref : l > ref); i = 0 <= ref ? ++l : --l) {
      requests.push(fn(i));
    }
    return $.when.apply($, requests).then(function(...args) {
      return Array.prototype.slice.call(args);
    });
  };

  // XXX low-level cache
  body_embeded_species = function() {
    var sp_home;
    sp_home = function(input, request, start, len) {
      if (start === -1) { // size request
        return $.Deferred().resolve([input, input.english ? 1 : 0]);
      } else {
        if (input.english) {
          return $.Deferred().resolve([
            input,
            [
              {
                name: input.english,
                description: input.english + " species home page for full details of " + input.english + " resources in Ensembl",
                domain_url: '/' + input.latin,
                db: 'none',
                id: input.latin,
                species: input.english,
                feature_type: 'Species Home Page',
                result_style: 'result-type-species-homepage'
              }
            ]
          ]);
        } else {
          return $.Deferred.resolve([{}, {}]);
        }
      }
    };
    return {
      context: function(state, update_seq) {
        var english, k, latin, ref, v;
        latin = null;
        ref = $.solr_config('spnames');
        for (k in ref) {
          v = ref[k];
          if (state.q_query().match(new RegExp(`\\b${k}\\b`, "gi"))) {
            latin = v;
            english = $.solr_config('revspnames.%', latin);
          }
        }
        return {state, update_seq, latin, english};
      },
      prepare: function(context, input, tags_in, depart) {
        var queries;
        if (!tags_in.main) {
          return null;
        }
        if (context.english != null) {
          if (tags_in.target_species == null) {
            tags_in.target_species = [];
          }
          tags_in.target_species.push(context.english);
        }
        queries = [[input, tags_in, depart]];
        if (context.english) {
          queries.unshift([
            {
              english: context.english,
              latin: context.latin
            },
            {
              sphome: 1
            },
            sp_home
          ]);
        }
        return queries;
      }
    };
  };

  body_hgvs_names = function() {
    var hgvs_name;
    hgvs_name = function(input, request, start, len) {
      var id;
      if (start === -1) {
        return $.Deferred().resolve([input, 1]);
      } else {
        id = input.id;
        return request.raw_ajax({id}, 'hgvs').then((data) => {
          var l, len1, list, m, ref, ref1, ref2;
          if (data.links.length) {
            list = "<ul>";
            ref1 = (ref = data.links) != null ? ref : [];
            for (l = 0, len1 = ref1.length; l < len1; l++) {
              m = ref1[l];
              list += '<li><a href="' + m.url + '">' + m.text + '</a>' + ((ref2 = m.tail) != null ? ref2 : '') + '</li>';
            }
            list += "</ul>";
            return [
              input,
              [
                {
                  name: "HGVS Identifier",
                  description: `'${data.id}' is an HGVS identifier.` + list,
                  result_style: 'result-type-species-homepage no-preview',
                  id: data.id
                }
              ]
            ];
          } else {
            return [input, []];
          }
        });
      }
    };
    return {
      context: function(state, update_seq) {
        return {state, update_seq};
      },
      prepare: function(context, input, tags_in, depart) {
        var id, queries;
        if (!tags_in.main) {
          return null;
        }
        queries = [[input, tags_in, depart]];
        id = input.q;
        if (id.match(/^ENS[GTP]\d{11}\S*[cgp]\./) || id.match(/^(\d{1,2}|[A-Z])\:g\./) || id.match(/^[A-Z]{2}\_\d{5,}\S*\:[cgp]\./)) {
          queries.unshift([
            {
              id: input.q
            },
            {},
            hgvs_name
          ]);
        }
        return queries;
      }
    };
  };

  body_elevate_quoted = function() {
    return {
      context: function(state, update_seq) {
        return {state, update_seq};
      },
      prepare: function(context, input, tags_in, depart) {
        var input_quoted, input_unquoted, qq, tags_quoted;
        if (!tags_in.main) {
          return null;
        }
        if (!input.q.match(/[^\w\s]/)) {
          return null;
        }
        if (input.q.match(/"/)) {
          return null; // already quoted, don't mess
        }
        qq = '"' + input.q.replace(/\s+/, '" "', 'g') + '"';
        tags_quoted = _clone_object(tags_in);
        tags_quoted.quoted = 1;
        input_quoted = _clone_object(input);
        input_quoted.q = qq;
        input_unquoted = _clone_object(input);
        input_unquoted.q = input.q + ' AND ( NOT ( ' + qq + ' ) )';
        return [[input_quoted, tags_quoted, depart], [input_unquoted, tags_in, depart]];
      }
    };
  };

  traditional_boost = function(q, field, values, boost) {
    var bq, i, l, len1, s, v;
    bq = [];
    for (i = l = 0, len1 = values.length; l < len1; i = ++l) {
      s = values[i];
      v = boost * (values.length - i - 1) / (values.length - 1);
      v = Math.floor(Math.pow(v, 1.25));
      bq.push(field + ':"' + s + '"' + (v ? "^" + v : ""));
    }
    q.push("( " + bq.join(" OR ") + " )");
    return q;
  };

  // Only better in the limited circumstances in which it works!
  better_boost = function(q, field, values, boost) {
    var i, l, len1, out, s, v, x;
    out = [];
    for (i = l = 0, len1 = values.length; l < len1; i = ++l) {
      s = values[i];
      v = boost * (values.length - i - 1) / (values.length - 1);
      v = Math.floor(Math.pow(v, 1.25));
      if (v) {
        v = '^' + v;
      } else {
        v = '';
      }
      out.push(`${q[0]}${v} AND ${field}:"${s}"`);
    }
    out = ((function() {
      var len2, n, results1;
      results1 = [];
      for (n = 0, len2 = out.length; n < len2; n++) {
        x = out[n];
        results1.push("( " + x + " )");
      }
      return results1;
    })()).join(' OR ');
    return [out];
  };

  add_extra_constraints = function(q_in, fq_in, extra) {
    var boost, bq, data, field, fq, invert, l, len1, len2, n, part, parts, q, s, str, use_better_boost, values, x;
    q = [q_in];
    fq = fq_in.slice(0);
    // Which boost should we use (if any)
    use_better_boost = true;
    if (q_in.match(/[ \t]/)) {
      use_better_boost = false;
    }
    if (q_in.match(/^(\w+:)?"[\w ]+"$/)) {
      use_better_boost = true;
    }
    for (l = 0, len1 = extra.length; l < len1; l++) {
      [field, invert, values, boost] = extra[l];
      // Add to facets (fq=)
      data = $.solr_config('static.ui.facets.key=', field);
      parts = [];
      for (n = 0, len2 = values.length; n < len2; n++) {
        s = values[n];
        part = data.key + ':"' + s + '"';
        if (data.filter != null) {
          part = " " + part + " AND ( " + data.filter + " ) ";
        }
        parts.push(" ( " + part + " ) ");
      }
      str = parts.join(" OR ");
      str = (invert ? `(NOT ( ${str} ))` : `( ${str} )`);
      fq.push(str);
      // Add boosts
      bq = [];
      if (boost != null) {
        if (use_better_boost) {
          q = better_boost(q, field, values, boost);
        } else {
          q = traditional_boost(q, field, values, boost);
        }
      }
    }
    if (q.length > 1) {
      q = ((function() {
        var len3, o, results1;
        results1 = [];
        for (o = 0, len3 = q.length; o < len3; o++) {
          x = q[o];
          results1.push("( " + x + " )");
        }
        return results1;
      })()).join(" AND ");
    }
    return [q, fq];
  };

  body_raw_request = function() {
    var raw_request;
    raw_request = function(input, request, start, len) {
      var params;
      params = _clone_object(input);
      if (start === -1) { // size request
        params.start = 0;
        params.rows = 10;
        return request.raw_ajax(params).then((data) => {
          var num, ref, ref1;
          num = (ref = data.result) != null ? (ref1 = ref.response) != null ? ref1.numFound : void 0 : void 0;
          return [
            data,
            num // regular request
          ];
        });
      } else {
        params.rows = len;
        params.start = start;
        return request.raw_ajax(params).then((data) => {
          var doc, docs, from, h, l, len1, len2, n, ref, ref1, ref2, ref3, ref4, ref5, snippet, to;
          docs = (ref = data.result) != null ? (ref1 = ref.response) != null ? ref1.docs : void 0 : void 0;
// substitue highlights XXX not here!
          for (l = 0, len1 = docs.length; l < len1; l++) {
            doc = docs[l];
            snippet = (ref2 = data.result) != null ? (ref3 = ref2.highlighting) != null ? ref3[doc.uid] : void 0 : void 0;
            if (snippet != null) {
              ref4 = $.solr_config('static.ui.hl_transfers');
              for (from in ref4) {
                to = ref4[from];
                snippet[to] = snippet[from];
              }
              ref5 = $.solr_config('static.ui.highlights');
              for (n = 0, len2 = ref5.length; n < len2; n++) {
                h = ref5[n];
                if (snippet[h]) {
                  doc[h] = snippet[h].join(' ... ');
                }
              }
            }
          }
          
          return [data, docs];
        });
      }
    };
    return {
      prepare: function(context, input, tags, depart) {
        return [[input, tags, raw_request]];
      }
    };
  };

  // XXX expire cache
  size_cache_q = "";

  size_cache = {};

  stringify_params = function(params) {
    var k, keys, l, len1, len2, len3, n, o, out, v, vals, vs;
    vals = [];
    keys = [];
    for (k in params) {
      v = params[k];
      keys.push(k);
    }
    keys.sort();
    for (l = 0, len1 = keys.length; l < len1; l++) {
      k = keys[l];
      vals.push("0", k);
      vs = params[k];
      if (!$.isArray(params[k])) {
        vs = ["" + vs];
      }
      vs.sort();
      for (n = 0, len2 = vs.length; n < len2; n++) {
        v = vs[n];
        vals.push("1", v);
      }
    }
    out = [];
    for (o = 0, len3 = vals.length; o < len3; o++) {
      v = vals[o];
      out.push(v.length + "-" + v);
    }
    return out.join('');
  };

  body_cache = function() {
    var try_cache;
    try_cache = function(orig) {
      return function(input, request, start, len) {
        var key;
        if (start === -1) {
          key = stringify_params(input);
          if (size_cache[key] != null) {
            return $.Deferred().resolve(size_cache[key]);
          } else {
            return orig(input, request, start, len).then(function(v) {
              size_cache[key] = v;
              return v;
            });
          }
        } else {
          return orig(input, request, start, len);
        }
      };
    };
    return {
      context: function(state, update_seq) {
        var q;
        q = state.q_query();
        if (size_cache_q !== q) {
          size_cache = {};
        }
        size_cache_q = q;
        return {state, update_seq};
      },
      prepare: function(context, input, tags, depart) {
        return [[input, tags, try_cache(depart)]];
      }
    };
  };

  body_split_favs = function() {
    var make_extras, normal_extras, prepare;
    make_extras = function(target) {
      var favs, rigid;
      rigid = [];
      favs = _clone_array($.solr_config('user.favs.species'));
      if (target != null) {
        favs = target.concat(favs);
      }
      if (favs.length) {
        rigid.push(['species', [favs], 100]);
      }
      return generate_block_list(rigid);
    };
    normal_extras = make_extras(null);
    prepare = function(context, input_in, tags_in, depart) {
      var extras, fq, input, k, l, len1, order, out, q, tags, v, x;
      tags = _clone_object(tags_in);
      if (!tags.main) {
        return null;
      }
      tags.blocks = 1;
      out = [];
      if (tags_in.target_species != null) {
        extras = make_extras(tags_in.target_species);
      } else {
        extras = normal_extras;
      }
      for (l = 0, len1 = extras.length; l < len1; l++) {
        x = extras[l];
        input = _clone_object(input_in);
        [q, fq] = add_extra_constraints(input.q, (function() {
          var ref, results1;
          ref = input.fq;
          results1 = [];
          for (k in ref) {
            v = ref[k];
            results1.push(k + ':"' + v + '"');
          }
          return results1;
        })(), x);
        input.q = q;
        input.fq = fq;
        order = context.state.order();
        if (order.length) {
          input.sort = order[0].column + " " + (order[0].order > 0 ? 'asc' : 'desc');
        }
        out.push([input, tags, depart]);
      }
      return out;
    };
    return {
      context: function(state, update_seq) {
        return {state, update_seq};
      },
      prepare
    };
  };

  body_restrict_categories = function() { // Used for mobile site, etc
    return {
      context: function(state, update_seq) {
        return {state, update_seq};
      },
      prepare: function(context, input, tags, depart) {
        var filter, types, x;
        types = $.solr_config("static.ui.restrict_facets");
        if (types && types.length) {
          filter = ((function() {
            var l, len1, results1;
            results1 = [];
            for (l = 0, len1 = types.length; l < len1; l++) {
              x = types[l];
              results1.push(`feature_type:"${x}"`);
            }
            return results1;
          })()).join(" OR ");
          input.q = `${input.q} AND ( ${filter} )`;
        }
        return [[input, tags, depart]];
      }
    };
  };

  body_frontpage_specials = function() {
    return {
      context: function(state, update_seq) {
        return {state, update_seq};
      },
      inspect: function(context, requests, docs_frags) {
        var i, l, ref, tops;
        tops = [];
        if (context.state.start() === 0) {
          for (i = l = 0, ref = requests.length; (0 <= ref ? l < ref : l > ref); i = 0 <= ref ? ++l : --l) {
            if (requests[i][0] !== -1 && tops.length < context.state.pagesize()) {
              tops = tops.concat(docs_frags[i]);
            }
          }
          tops = tops.slice(0, context.state.pagesize());
        }
        if (context.update_seq !== current_update_seq) {
          return $.Deferred().reject();
        }
        $(document).trigger('main_front_page', [tops, context.state, context.update_seq]);
        return $.Deferred().resolve();
      }
    };
  };

  body_highlights = function() {
    var add_highlight_fields;
    add_highlight_fields = function(orig) {
      return function(input, request, start, len) {
        var v;
        v = orig(input, request, start, len);
        if (start !== -1) {
          return v.then(([data, docs]) => {
            var doc, h, k, l, len1, len2, len3, n, o, ref, ref1, ref2;
            // Add _hr highlighting to description
            if (((ref = data.result) != null ? ref.highlighting : void 0) != null) {
              for (l = 0, len1 = docs.length; l < len1; l++) {
                doc = docs[l];
                if (doc.uid != null) {
                  if (data.result.highlighting[doc.uid]) {
                    if (data.result.highlighting[doc.uid]._hr) {
                      doc.description += ' <div class="result-hr"> ' + data.result.highlighting[doc.uid]._hr.join(" ") + '</div>';
                    }
                    ref1 = data.result.highlighting[doc.uid];
                    for (v = n = 0, len2 = ref1.length; n < len2; v = ++n) {
                      k = ref1[v];
                      if (k === '_hr') {
                        continue;
                      }
                      ref2 = $.solr_config('static.ui.highlights');
                      for (o = 0, len3 = ref2.length; o < len3; o++) {
                        h = ref2[o];
                        if (doc[h] && snippet[h]) {
                          doc[h] = snippet[h].join(' ... ');
                        }
                      }
                    }
                  }
                }
              }
            }
            return [data, docs];
          });
        }
        return v;
      };
    };
    return {
      prepare: function(context, input, tags, depart) {
        if (!tags.main) {
          return null;
        }
        input.hl = 'true';
        input['hl.fl'] = $.solr_config('static.ui.highlights');
        input['hl.fragsize'] = 500;
        tags.highlighted = 1;
        return [[input, tags, add_highlight_fields(depart)]];
      }
    };
  };

  body_quicklinks = function() {
    var add_quicklinks;
    add_quicklinks = function(orig) {
      return function(input, request, start, len) {
        var v;
        v = orig(input, request, start, len);
        if (start === -1) {
          return v;
        }
        return v.then(function([data, docs]) {
          var doc, found, i, l, len1, len2, len3, len4, lhs, link, n, o, ok, quicklinks, ref, ref1, ref2, ref3, ref4, ref5, ref6, regex, res, u, url, value;
          for (l = 0, len1 = docs.length; l < len1; l++) {
            doc = docs[l];
            quicklinks = [];
            ref = $.solr_config('static.ui.links');
            for (i = n = 0, len2 = ref.length; n < len2; i = ++n) {
              link = ref[i];
              ok = true;
              ref2 = (ref1 = link.conditions) != null ? ref1 : {};
              // Check if conditions from config are met
              for (value in ref2) {
                regex = ref2[value];
                lhs = value.replace(/\{(.*?)\}/g, function(g0, g1) {
                  var ref3;
                  return (ref3 = doc[g1]) != null ? ref3 : '';
                });
                if (!lhs.match(new RegExp(regex))) {
                  ok = false;
                  break;
                }
              }
              if (!ok) {
                continue;
              }
              // Check result condition (if any)
              if (link.result_condition != null) {
                found = false;
                ref4 = (ref3 = doc.quick_links) != null ? ref3 : [];
                for (o = 0, len3 = ref4.length; o < len3; o++) {
                  res = ref4[o];
                  if (link.result_condition === res) {
                    found = true;
                    break;
                  }
                }
                if (!found) {
                  continue;
                }
              }
              if (link.result_condition_not != null) {
                ref6 = (ref5 = doc.quick_links) != null ? ref5 : [];
                for (u = 0, len4 = ref6.length; u < len4; u++) {
                  res = ref6[u];
                  if (link.result_condition_not === res) {
                    ok = false;
                  }
                }
              }
              if (!ok) {
                continue;
              }
              // Extract URL parts for quicklinks
              if (doc.domain_url) {
                doc['url1'] = doc.domain_url.split('/')[0];
              }
              // Build URL
              url = link.url.replace(/\{(.*?)\}/g, function(g0, g1) {
                var ref7;
                return (ref7 = doc[g1]) != null ? ref7 : '';
              });
              quicklinks.push({
                url,
                title: link.title
              });
            }
            doc.quicklinks = quicklinks;
          }
          return [data, docs];
        });
      };
    };
    return {
      prepare: function(context, input, tags, depart) {
        if (!tags.main) {
          return null;
        }
        return [[input, tags, add_quicklinks(depart)]];
      }
    };
  };

  body_elevate_crossspecies = function() {
    return {
      prepare: function(context, input, tags, depart) {
        if (tags.main) {
          if (tags.target_species == null) {
            tags.target_species = [];
          }
          tags.target_species.unshift("CrossSpecies");
        }
        return [[input, tags, depart]];
      }
    };
  };

  body_requests = [body_raw_request, body_cache, body_embeded_species, body_hgvs_names, body_elevate_crossspecies, body_frontpage_specials, body_highlights, body_elevate_quoted, body_restrict_categories, body_quicklinks, body_split_favs];

  run_all_prepares = function(contexts, plugins, input) {
    var i, l, len1, len2, n, output, p, query, run, tags_in, v;
    tags_in = {
      main: 1
    };
    run = $.Callbacks("once");
    input = [[input, tags_in, run, null]];
    for (i = l = 0, len1 = plugins.length; l < len1; i = ++l) {
      p = plugins[i];
      if (p.prepare != null) {
        output = [];
        for (n = 0, len2 = input.length; n < len2; n++) {
          query = input[n];
          v = p.prepare(contexts[i], query[0], query[1], query[2]);
          if (!v) {
            v = [query];
          }
          output = output.concat(v);
        }
        input = output;
      }
    }
    return output;
  };

  dispatch_main_requests = function(request, state, table, update_seq) {
    var b, blocks, contexts, i, l, len1, len2, n, p, plugins, pr, prepares, ret, total;
    plugins = (function() {
      var l, len1, results1;
      results1 = [];
      for (l = 0, len1 = body_requests.length; l < len1; l++) {
        b = body_requests[l];
        results1.push(b());
      }
      return results1;
    })();
    // Determine what the blocks are to be: XXX cache this
    contexts = [];
    prepares = [];
    for (i = l = 0, len1 = plugins.length; l < len1; i = ++l) {
      p = plugins[i];
      contexts.push(p.context != null ? p.context(state, update_seq) : null);
    }
    prepares = run_all_prepares(contexts, plugins, {
      q: state.q_query(),
      fq: state.q_facets()
    });
    blocks = [];
    for (n = 0, len2 = prepares.length; n < len2; n++) {
      pr = prepares[n];
      (function(pp) {
        return blocks.push(function(request, start, len) {
          return pp[2](pp[0], request, start, len).then(function(data) {
            return data[1];
          });
        });
      })(pr);
    }
    // Calculate block sizes
    total = 0;
    ret = $.Deferred().resolve();
    ret = ret.then(() => {
      return each_block(blocks.length, (i) => {
        return blocks[i](request, -1).then(function(data) {
          total += data;
          return data;
        });
      });
    });
    return ret.then((sizes) => {
      var local_offset, o, offset, ref, requests, results, rows_left;
      if (update_seq !== current_update_seq) {
        return $.Deferred().reject();
      }
      $(document).trigger('num_known', [total, state, update_seq]);
      // Calculate the requests we will make
      requests = [];
      offset = 0;
      rows_left = state.pagesize();
      for (i = o = 0, ref = blocks.length; (0 <= ref ? o < ref : o > ref); i = 0 <= ref ? ++o : --o) {
        if (state.start() < offset + sizes[i] && state.start() + state.pagesize() > offset) {
          local_offset = state.start() - offset;
          if (local_offset < 0) {
            local_offset = 0;
          }
          requests.push([local_offset, rows_left]);
          rows_left -= sizes[i] - local_offset;
        } else {
          requests.push([-1, -1]);
        }
        offset += sizes[i];
      }
      // Make the requests
      results = each_block(blocks.length, (i) => {
        if (requests[i][0] !== -1) {
          return blocks[i](request, requests[i][0], requests[i][1]);
        }
      });
      // Run inspects from plugins
      results = results.then((docs_frags) => {
        return each_block(plugins.length, (i) => {
          if (plugins[i].inspect != null) {
            return plugins[i].inspect(contexts[i], requests, docs_frags);
          }
        }).then(() => {
          return docs_frags;
        });
      });
      // XXX order
      return [requests, results];
    });
  };

  draw_main_requests = function(t, state, requests, results, update_seq) {
    return results.then(function(docs_frags) {
      if (update_seq !== current_update_seq) {
        return $.Deferred().reject();
      }
      return each_block(requests.length, (i) => {
        if (requests[i][0] !== -1) {
          return t.draw_rows({
            rows: docs_frags[i],
            cols: state.columns()
          });
        } else {
          return $.Deferred().resolve(null);
        }
      });
    });
  };

  dispatch_draw_main = function(request, state, table, update_seq) {
    var t;
    t = table.xxx_table();
    t.reset();
    return dispatch_main_requests(request, state, table, update_seq).then(([req, res]) => {
      return draw_main_requests(t, state, req, res, update_seq);
    });
  };

  // TODO plugin mechanism for these as well
  dispatch_facet_request = function(request, state, table, update_seq) {
    var filter, fq, k, params, q, types, v, x;
    fq = ((function() {
      var ref, results1;
      ref = state.q_facets();
      results1 = [];
      for (k in ref) {
        v = ref[k];
        results1.push(`${k}:"${v}"`);
      }
      return results1;
    })()).join(' AND ');
    q = state.q_query();
    // This is a hack to get around a SOLR BUG
    q = `( NOT species:xxx ) AND ( ${q} ) AND ( NOT species:yyy )`;
    types = $.solr_config("static.ui.restrict_facets");
    if (types && types.length) {
      filter = ((function() {
        var l, len1, results1;
        results1 = [];
        for (l = 0, len1 = types.length; l < len1; l++) {
          x = types[l];
          results1.push(`feature_type:"${x}"`);
        }
        return results1;
      })()).join(" OR ");
      q = `${q} AND ( ${filter} )`;
    }
    params = {
      q,
      fq,
      rows: 1,
      'facet.field': (function() {
        var l, len1, ref, results1;
        ref = $.solr_config('static.ui.facets');
        results1 = [];
        for (l = 0, len1 = ref.length; l < len1; l++) {
          k = ref[l];
          results1.push(k.key);
        }
        return results1;
      })(),
      'facet.mincount': 1,
      facet: true
    };
    $(document).trigger('faceting_unknown', [update_seq]);
    return request.raw_ajax(params).then((data) => {
      var all_facets, facets, ref, ref1, ref2, ref3;
      if (update_seq !== current_update_seq) {
        return $.Deferred().reject();
      }
      all_facets = (function() {
        var l, len1, ref, results1;
        ref = $.solr_config('static.ui.facets');
        results1 = [];
        for (l = 0, len1 = ref.length; l < len1; l++) {
          k = ref[l];
          results1.push(k.key);
        }
        return results1;
      })();
      facets = state.q_facets();
      return $(document).trigger('faceting_known', [(ref = data.result) != null ? (ref1 = ref.facet_counts) != null ? ref1.facet_fields : void 0 : void 0, facets, (ref2 = data.result) != null ? (ref3 = ref2.response) != null ? ref3.numFound : void 0 : void 0, state, update_seq]);
    });
  };

  // Generate the criteria for the various blocks by converting
  // configured list to ordered power-set thereof.
  generate_block_list = function(rigid) {
    var expand_criteria, remainder_criteria;
    expand_criteria = function(criteria, remainder) {
      var all, boost, h, head, l, len1, len2, n, out, r, rec, s, sets, type;
      if (criteria.length === 0) {
        return [[]];
      }
      [type, sets, boost] = criteria[0];
      head = (function() {
        var l, len1, results1;
        results1 = [];
        for (l = 0, len1 = sets.length; l < len1; l++) {
          s = sets[l];
          results1.push([type, false, s, boost]);
        }
        return results1;
      })();
      head.push([type, true, remainder[type]]);
      rec = expand_criteria(criteria.slice(1), remainder);
      all = [];
      for (l = 0, len1 = rec.length; l < len1; l++) {
        r = rec[l];
        for (n = 0, len2 = head.length; n < len2; n++) {
          h = head[n];
          out = _clone_array(r);
          out.push(h);
          all.push(out);
        }
      }
      return all;
    };
    remainder_criteria = function(criteria) {
      var l, len1, len2, n, out, s, sets, type;
      out = {};
      for (l = 0, len1 = criteria.length; l < len1; l++) {
        [type, sets] = criteria[l];
        out[type] = [];
        for (n = 0, len2 = sets.length; n < len2; n++) {
          s = sets[n];
          out[type] = out[type].concat(s);
        }
      }
      return out;
    };
    return expand_criteria(rigid, remainder_criteria(rigid));
  };

  all_requests = {
    main: dispatch_draw_main,
    faceter: dispatch_facet_request
  };

  dispatch_all_requests = function(request, state, table, update_seq) {
    var plugin_actions, plugin_list, q;
    request.abort_ajax();
    q = state.q_query();
    if (q != null) {
      request.some_query();
    } else {
      request.no_query();
      return $.Deferred().reject();
    }
    // run all plugins
    plugin_list = [];
    plugin_actions = [];
    $.each(all_requests, (k, v) => {
      plugin_list.push(k);
      return plugin_actions.push(v(request, state, table, update_seq));
    });
    return $.when.apply(this, plugin_actions);
  };

  rate_limiter = window.rate_limiter(1000, 2000);

  // XXX Faceter orders
  // XXX out of date responses / abort
  current_update_seq = 0;

  xhr_idx = 1;

  Request = class Request {
    constructor(hub1) {
      this.hub = hub1;
      this.xhrs = {};
    }

    req_outstanding() {
      var k, v;
      return ((function() {
        var ref, results1;
        ref = this.xhrs;
        results1 = [];
        for (k in ref) {
          v = ref[k];
          results1.push(k);
        }
        return results1;
      }).call(this)).length;
    }

    render_table(table, state) {
      current_update_seq += 1;
      $(document).data('update_seq', current_update_seq);
      $(document).trigger('state_known', [state, current_update_seq]);
      return dispatch_all_requests(this, state, table, current_update_seq);
    }

    // XXX shortcircuit get on satisfied
    // XXX first page optimise
    // XXX table-based compisite renderers
    abort_ajax() {
      var k, ref, x;
      ref = this.xhrs;
      for (k in ref) {
        x = ref[k];
        x.abort();
      }
      if (this.req_outstanding()) {
        this.hub.spin_down();
      }
      return this.xhrs = {};
    }

    raw_ajax(params, url) {
      var idx, xhr;
      if (url == null) {
        url = 'search';
      }
      url = $('#species_path').val() + "/Ajax/" + url;
      idx = (xhr_idx += 1);
      xhr = $.ajax({
        url,
        data: params,
        traditional: true,
        dataType: 'json'
      });
      if (!this.req_outstanding()) {
        this.hub.spin_up();
      }
      this.xhrs[idx] = xhr;
      xhr = xhr.then((data) => {
        delete this.xhrs[idx];
        if (!this.req_outstanding()) {
          this.hub.spin_down();
        }
        if (data.error) {
          this.hub.fail();
          $('.searchdown-box').css('display', 'block');
          return $.Deferred().reject();
        } else {
          this.hub.unfail();
          return data;
        }
      });
      return xhr;
    }

    some_query() {
      $('.page_some_query').show();
      return $('.page_no_query').hide();
    }

    no_query() {
      $('.page_some_query').hide();
      return $('.page_no_query').show();
    }

  };

  // XXX compile
  // XXX current search
  // XXX species-independent indices
  // XXX filterfocus to table
  Renderer = class Renderer {
    constructor(hub1, source1) {
      this.hub = hub1;
      this.source = source1;
    }

    page(results) {
      var page;
      page = parseInt(this.hub.page());
      if (page < 1 || page > results.num_pages()) {
        return 1;
      } else {
        return page;
      }
    }

    render_stage(more) {
      var main;
      $('.nav-heading').hide();
      main = $('#solr_content').empty();
      // Move from solr_content to table
      this.state = new SearchTableState(this.hub, $('#solr_content'), $.solr_config('static.ui.all_columns'));
      $(document).data('templates', this.hub.templates());
      this.table = new window.search_table(this.hub.templates(), this.state, {
        multisort: 0,
        filter_col: 'q',
        chunk_size: 100,
        style_col: 'result_style'
      });
      this.render_style(main, this.table);
      return more();
    }

    render_results() {
      this.state.update();
      $('.preview_holder').trigger('preview_close');
      return this.hub.request().render_table(this.table, this.state);
    }

    get_all_data(start, num) {
      var fixed_state;
      fixed_state = $.extend(true, {}, this.state);
      fixed_state.pagesize_override = 1000;
      return this.get_data(fixed_state);
    }

    get_data(state) {
      var update_seq;
      if (state == null) {
        state = this.state;
      }
      update_seq = current_update_seq;
      return dispatch_main_requests(this.hub.request(), state, this.table, update_seq).then(([req, res]) => {
        return res.then((docs) => {
          var d, data, l, len1;
          data = {
            rows: [],
            cols: state.columns()
          };
          for (l = 0, len1 = docs.length; l < len1; l++) {
            d = docs[l];
            if (d != null) {
              data.rows = data.rows.concat(d);
            }
          }
          return data;
        });
      });
    }

    render_style(root, table) {
      var clayout, page;
      clayout = this.hub.layout();
      page = {
        layouts: {
          entries: [
            {
              label: 'Standard',
              key: 'standard'
            },
            {
              label: 'Table',
              key: 'table'
            }
          ],
          title: 'Layout:',
          select: ((k) => {
            $(document).trigger('ga', ['SrchLayout', 'switch', k]);
            return this.hub.update_url({
              style: k
            });
          })
        },
        table: {
          table_ready: (el, data) => {
            return this.table.collect_view_model(el, data);
          },
          state: this.state,
          download_curpage: (el, fn) => {
            return this.get_data().done((data) => {
              return this.table.transmit_data(el, fn, data);
            });
          },
          download_all: (el, fn) => {
            return this.get_all_data().done((data) => {
              return this.table.transmit_data(el, fn, data);
            });
          }
        }
      };
      this.hub.templates().generate('page', page, function(out) {
        return root.append(out);
      });
      if (page.layouts.set_fn != null) {
        return page.layouts.set_fn(clayout);
      }
    }

  };

  SearchTableState = class SearchTableState extends window.TableState {
    constructor(hub1, source, element, columns) {
      super(source, element, columns);
      this.hub = hub1;
    }

    update() {
      var dir, filter, k, parts, ref, v;
      if (this.hub.sort()) {
        parts = this.hub.sort().split('-', 2);
        if (parts[0] === 'asc') {
          dir = 1;
        } else if (parts[0] === 'desc') {
          dir = -1;
        }
        if (dir) {
          this.order([
            {
              column: parts[1],
              order: dir
            }
          ]);
        }
      }
      this.page(this.hub.page());
      this.e().data('pagesize', this.hub.per_page());
      this.e().data('columns', this.hub.columns());
      this.e().trigger('fix_widths');
      filter = [
        {
          columns: ['q'],
          value: this.hub.query()
        }
      ];
      ref = this.hub.current_facets();
      for (k in ref) {
        v = ref[k];
        filter.push({
          columns: [k],
          value: v
        });
      }
      return this.filter(filter);
    }

    _is_default_cols(columns) {
      var count, k, l, len1, len2, n, ref, v;
      count = {};
      ref = $.solr_config('static.ui.columns');
      for (l = 0, len1 = ref.length; l < len1; l++) {
        k = ref[l];
        count[k] = 1;
      }
      for (n = 0, len2 = columns.length; n < len2; n++) {
        k = columns[n];
        count[k]++;
      }
      for (k in count) {
        v = count[k];
        if (v !== 2) {
          return false;
        }
      }
      return true;
    }

    _extract_filter(col) {
      var c, f, l, len1, len2, n, ref, ref1, val;
      ref = this.filter();
      for (l = 0, len1 = ref.length; l < len1; l++) {
        f = ref[l];
        ref1 = f.columns;
        for (n = 0, len2 = ref1.length; n < len2; n++) {
          c = ref1[n];
          if (c === col) {
            val = f.value;
          }
        }
      }
      return val;
    }

    set() {
      var columns, dir, state;
      state = {};
      if (this.order().length) {
        dir = (this.order()[0].order > 0 ? 'asc' : 'desc');
        state.sort = dir + "-" + this.order()[0].column;
      }
      state.page = this.page();
      state.perpage = this.pagesize();
      if (state.perpage !== this.hub.per_page()) { // page size changed!
        state.page = 1;
      }
      columns = this.columns();
      if (this._is_default_cols(columns)) {
        state.columns = '';
      } else {
        state.columns = columns.join("*");
      }
      state.q = this._extract_filter('q');
      return this.hub.update_url(state);
    }

    q_query() {
      var c, fr, l, len1, len2, n, ref, ref1;
      ref = this.filter();
      for (l = 0, len1 = ref.length; l < len1; l++) {
        fr = ref[l];
        ref1 = fr.columns;
        for (n = 0, len2 = ref1.length; n < len2; n++) {
          c = ref1[n];
          if (c === 'q') {
            return fr.value;
          }
        }
      }
      return '';
    }

    q_facets() {
      var c, facets, fr, l, len1, len2, n, ref, ref1;
      facets = {};
      ref = this.filter();
      for (l = 0, len1 = ref.length; l < len1; l++) {
        fr = ref[l];
        ref1 = fr.columns;
        for (n = 0, len2 = ref1.length; n < len2; n++) {
          c = ref1[n];
          if (c !== 'q') {
            facets[c] = fr.value;
          }
        }
      }
      return facets;
    }

  };

  // Go!
  $(function() {
    if (code_select()) {
      return window.hub = new Hub(function(hub) {
        hub.service();
        return $(window).on('statechange', function(e) {
          return hub.service();
        });
      });
    }
  });

  // XXX move to utils
  remote_log = function(msg) {
    return $.post('/Ajax/report_error', {
      msg,
      type: 'remote log',
      support: JSON.stringify($.support)
    });
  };

  double_trap = 0;

  window.onerror = function(msg, url, line) {
    if (double_trap) {
      return;
    }
    double_trap = 1;
    $.post('/Ajax/report_error', {
      msg,
      url,
      line,
      type: 'onerror catch',
      support: JSON.stringify($.support)
    });
    return false;
  };

}).call(this);
