// Generated by CoffeeScript 1.5.0
(function() {
  var Source, Table, TableHolder, TableState, _clone_array;

  _clone_array = function(a) {
    return $.extend(true, [], a);
  };

  Source = (function() {

    function Source() {}

    Source.prototype.init = function(cols) {
      var i, _i, _ref, _results;
      this.cols = $.extend(true, [], cols);
      this.colidx = [];
      _results = [];
      for (i = _i = 0, _ref = this.cols.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        _results.push(this.colidx[this.cols[i].key] = i);
      }
      return _results;
    };

    Source.prototype.columns = function() {
      return this.cols;
    };

    return Source;

  })();

  TableState = (function() {

    function TableState(source, el) {
      var c, scols, _i, _len,
        _this = this;
      this.source = source;
      scols = this.source.columns();
      this._filter = [];
      this._order = [];
      this._colkey = {};
      for (_i = 0, _len = scols.length; _i < _len; _i++) {
        c = scols[_i];
        this._colkey[c.key] = c;
      }
      this._sortkey = {};
      this.el = $(el);
      this.el.data('columns', (function() {
        var _j, _len1, _results;
        _results = [];
        for (_j = 0, _len1 = scols.length; _j < _len1; _j++) {
          c = scols[_j];
          _results.push(c.key);
        }
        return _results;
      })());
      this.el.data('pagesize', 10);
      this.el.on('fix_widths', function() {
        var col, columns, i, perc_per_unit, total, units_used, _j, _k, _l, _len1, _len2, _len3, _m, _results;
        columns = _this.el.data('columns');
        for (_j = 0, _len1 = columns.length; _j < _len1; _j++) {
          c = columns[_j];
          if (_this._colkey[c].width === 0) {
            _this._colkey[c].width = 1;
          }
        }
        units_used = 0;
        for (_k = 0, _len2 = columns.length; _k < _len2; _k++) {
          c = columns[_k];
          units_used += _this._colkey[c].width;
        }
        perc_per_unit = 100 / units_used;
        total = 0;
        for (_l = 0, _len3 = columns.length; _l < _len3; _l++) {
          c = columns[_l];
          _this._colkey[c].total = _this._colkey[c].width * perc_per_unit + total;
          total += _this._colkey[c].width * perc_per_unit;
          _this._colkey[c].percent = 0;
        }
        col = 0;
        _results = [];
        for (i = _m = 0; _m <= 99; i = ++_m) {
          if (i > _this._colkey[columns[col]].total && col < columns.length) {
            col++;
          }
          _results.push(_this._colkey[columns[col]].percent++);
        }
        return _results;
      });
    }

    TableState.prototype.e = function() {
      return this.el;
    };

    TableState.prototype._update_sortkey = function() {
      var r, _i, _len, _ref, _results;
      this._sortkey = {};
      _ref = this._order;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        r = _ref[_i];
        _results.push(this._sortkey[r.column] = r.order);
      }
      return _results;
    };

    TableState.prototype.filter = function(f) {
      if (f != null) {
        this._filter = f;
      }
      return this._filter;
    };

    TableState.prototype.columns = function() {
      return this.el.data('columns');
    };

    TableState.prototype.order = function(r) {
      if (r != null) {
        this._order = r;
        this._update_sortkey();
      }
      return this._order;
    };

    TableState.prototype.page = function(p) {
      var _ref;
      if (p != null) {
        this.el.data('page', p);
      }
      return (_ref = this.el.data('page')) != null ? _ref : 1;
    };

    TableState.prototype.pagesize = function() {
      return this.el.data('pagesize');
    };

    TableState.prototype.start = function() {
      return (this.page() - 1) * this.pagesize();
    };

    TableState.prototype.coldata = function() {
      var k, _i, _len, _ref, _results;
      _ref = this.el.data('columns');
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        k = _ref[_i];
        _results.push(this._colkey[k]);
      }
      return _results;
    };

    TableState.prototype.sortkey = function(k) {
      return this._sortkey[k];
    };

    TableState.prototype.associate = function(table) {
      this.table = table;
    };

    TableState.prototype.set = function() {
      return this.table.render();
    };

    return TableState;

  })();

  TableHolder = (function() {

    function TableHolder(templates, source, state, options) {
      this.templates = templates;
      this.source = source;
      this.state = state;
      this.options = options != null ? options : {};
      this.state.associate(this);
    }

    TableHolder.prototype.get_all_data = function(callback) {
      var out;
      out = {
        rows: []
      };
      return this.get_some_data(0, 100, out, callback);
    };

    TableHolder.prototype.get_some_data = function(start, num, acc, callback) {
      var _this = this;
      return this.get_data(start, num, function(data) {
        if (data.rows.length === 0 || ((_this.max != null) && start + data.rows.length > _this.max)) {
          return callback(acc);
        } else {
          if ((data.cols != null) && (acc.cols == null)) {
            acc.cols = data.cols;
          }
          acc.rows = acc.rows.concat(data.rows);
          return _this.get_some_data(start + data.rows.length, num, acc, callback);
        }
      });
    };

    TableHolder.prototype.get_data = function(start, num, callback) {
      return this.source.get(this.state.filter(), this.state.columns(), this.state.order(), start, num, callback, false);
    };

    TableHolder.prototype.transmit_data = function(el, fn, data) {
      var $form, c, r, row, rows, _i, _j, _len, _len1, _ref, _ref1;
      rows = [];
      rows.push(data.cols);
      _ref = data.rows;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        r = _ref[_i];
        row = [];
        _ref1 = data.cols;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          c = _ref1[_j];
          if (c === 'id_with_url') {
            r[c] = r['id'];
          }
          row.push(r[c]);
        }
        rows.push(row);
      }
      $form = $('.t_download_export', el);
      $('.filename', $form).val(fn);
      $('.data', $form).val(JSON.stringify(rows));
      $('.expopts', $form).val(JSON.stringify((function() {
        var _k, _len2, _ref2, _results;
        _ref2 = data.cols;
        _results = [];
        for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
          c = _ref2[_k];
          _results.push({});
        }
        return _results;
      })()));
      return $form.trigger('submit');
    };

    TableHolder.prototype.generate_model = function(extra) {
      var model,
        _this = this;
      model = {
        table_ready: function(el, data) {
          return _this.collect_view_model(el, data);
        },
        state: this.state,
        download_curpage: function(el, fn) {
          return _this.get_data(_this.state.start(), _this.state.pagesize(), function(data) {
            return _this.transmit_data(el, fn, data);
          });
        },
        download_all: function(el, fn) {
          return _this.get_all_data(function(data) {
            return _this.transmit_data(el, fn, data);
          });
        }
      };
      return model;
    };

    TableHolder.prototype.collect_view_model = function(el, data) {
      return this.outer = el;
    };

    TableHolder.prototype.element = function() {
      return this.outer;
    };

    TableHolder.prototype.draw_table = function() {
      var table;
      table = new Table(this);
      return table.render();
    };

    TableHolder.prototype.table_ready = function(html) {
      var table;
      table = $('.search_table_proper', this.outer);
      table.empty();
      return table.append(html);
    };

    TableHolder.prototype.data_actions = function(data) {
      if (this.options.update != null) {
        return this.options.update.call(this, data);
      }
    };

    return TableHolder;

  })();

  Table = (function() {
    var _idx;

    _idx = 0;

    Table.prototype.new_idx = function() {
      return this.idx = _idx++;
    };

    function Table(holder) {
      var _ref;
      this.holder = holder;
      this.multisort = (_ref = this.holder.options.multisort) != null ? _ref : true;
    }

    Table.prototype.render_head = function(t_data, data, first) {
      var c, dir, state, _i, _len, _ref;
      t_data.headings = {};
      _ref = this.holder.state.coldata();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        c = _ref[_i];
        state = 'off';
        dir = this.holder.state.sortkey(c.key);
        if (dir != null) {
          state = (dir > 0 ? "asc" : "desc");
        }
        if (c.nosort) {
          state = '';
        }
        t_data.headings[c.key] = {
          text: c != null ? c.name : void 0,
          state: state,
          key: c.key,
          dir: dir
        };
      }
      return t_data.first = first;
    };

    Table.prototype.render_tail = function(table, data) {};

    Table.prototype.render_row = function(data) {
      this.stripe = !this.stripe;
      return {
        cols: data,
        stripe: this.stripe
      };
    };

    Table.prototype.render_data = function(data, first, last) {
      var c, r, t_data, t_main, table, widths, _i, _len, _ref;
      t_data = {
        table_row: [],
        rows: [],
        cols: data.cols
      };
      widths = (function() {
        var _i, _len, _ref, _results;
        _ref = this.holder.state.coldata();
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          c = _ref[_i];
          _results.push(c.percent);
        }
        return _results;
      }).call(this);
      t_data.widths = widths;
      this.render_head(t_data, data, first);
      _ref = data.rows;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        r = _ref[_i];
        t_data.rows.push(this.render_row(r));
      }
      if (last) {
        this.render_tail(t_data, data);
      }
      t_main = this.holder.templates.generate('chunk', t_data);
      table = this;
      $('.search_table_sorter', t_main).on('click', function(e) {
        var dir, key, order, _j, _len1, _ref1;
        order = [];
        key = $(this).data('key');
        dir = $(this).data('dir');
        if (e.shiftKey && table.multisort) {
          _ref1 = this.holder.state.order();
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            e = _ref1[_j];
            if (e.column !== key) {
              order.push(e);
            }
          }
        }
        order.push({
          column: key,
          order: (dir > 0 ? -1 : 1)
        });
        table.holder.state.order(order);
        table.holder.state.set();
        return false;
      });
      return t_main;
    };

    Table.prototype.render_chunk = function(data, first, last, fire, replace, next) {
      var outer;
      if (first && fire) {
        this.holder.data_actions(data);
      }
      outer = this.render_data(data, first, last);
      if (replace != null) {
        replace.replaceWith(outer);
      } else {
        outer.appendTo(this.container);
      }
      if (first && fire) {
        this.holder.table_ready(this.container);
      }
      return next.call(this, outer);
    };

    Table.prototype.get_page = function(page, start, got, chunk, idx, getter, iter) {
      var toget,
        _this = this;
      if (iter == null) {
        iter = 0;
      }
      toget = (page ? page - got : chunk);
      if (toget > chunk) {
        toget = chunk;
      }
      return getter.call(this, start + got, toget, function(data) {
        var more;
        if (idx !== _this.idx) {
          return;
        }
        more = !!((got + data.rows.length < page || page === 0) && data.rows.length);
        return _this.render_chunk(data, got === 0, !more, true, void 0, function(table) {
          var got_here;
          got_here = data.rows.length;
          if (more) {
            return _this.get_page(page, start, got + got_here, chunk, idx, getter, iter + 1);
          }
        });
      });
    };

    Table.prototype.render_main = function(idx) {
      var chunk, got, page, start;
      this.stripe = 1;
      got = 0;
      start = this.holder.state.start();
      page = this.holder.state.pagesize();
      chunk = this.holder.source.chunk_size();
      return this.get_page(this.holder.state.pagesize(), this.holder.state.start(), 0, this.holder.source.chunk_size(), idx, this.get_data);
    };

    Table.prototype.get_data = function(start, num, more) {
      return this.holder.source.get(this.holder.state.filter(), this.holder.state.columns(), this.holder.state.order(), start, num, more);
    };

    Table.prototype.render = function() {
      if (this.container != null) {
        this.container.remove();
      }
      this.new_idx();
      this.container = $('<div/>').addClass('search_table');
      return this.render_main(this.idx);
    };

    return Table;

  })();

  window.TableSource = Source;

  window.TableState = TableState;

  window.search_table = TableHolder;

}).call(this);
