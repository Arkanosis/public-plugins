// Generated by CoffeeScript 2.3.1
(function() {
  // Copyright [1999-2015] Wellcome Trust Sanger Institute and the EMBL-European Bioinformatics Institute
  // Copyright [2016-2018] EMBL-European Bioinformatics Institute

  // Licensed under the Apache License, Version 2.0 (the "License");
  // you may not use this file except in compliance with the License.
  // You may obtain a copy of the License at

  //     http://www.apache.org/licenses/LICENSE-2.0

  // Unless required by applicable law or agreed to in writing, software
  // distributed under the License is distributed on an "AS IS" BASIS,
  // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  // See the License for the specific language governing permissions and
  // limitations under the License.
  var TextProc2;

  TextProc2 = class TextProc2 {
    constructor() {
      this.candidates = {};
      this.values = {};
      this.running = [];
    }

    //# CANDIDATES ##
    candidate(key, value, priority) {
      var ref, ref1;
      if (priority == null) {
        priority = (ref = (ref1 = this.candidates[key]) != null ? ref1.priority : void 0) != null ? ref : 0;
      }
      if (value == null) {
        return;
      }
      if ((this.candidates[key] == null) || this.candidates[key].priority < priority) {
        return this.candidates[key] = {value, priority};
      }
    }

    best(key) {
      var ref;
      return (ref = this.candidates[key]) != null ? ref.value : void 0;
    }

    //# VALUE SETS ##
    add_value(key, value, position) {
      if (!this.values[key]) {
        this.values[key] = [];
      }
      return this.values[key].push({value, position});
    }

    all_values(key) {
      return this.values[key];
    }

    //# OUTPUT ##
    send(key, value) {
      return this.output[key] = value;
    }

    //# RUNNING ##
    register(prio, method) {
      return this.running.push({prio, method});
    }

    _sort_running() {
      var r;
      return (function() {
        var i, len, ref, results;
        ref = this.running.sort(function(a, b) {
          return a.prio - b.prio;
        });
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          r = ref[i];
          results.push(r.method);
        }
        return results;
      }).call(this);
    }

    run(data) {
      var i, k, len, r, ref, v;
      this.candidates = {};
      this.values = {};
      this.output = {};
      for (k in data) {
        v = data[k];
        this.candidate(k, v, 0);
      }
      ref = this._sort_running();
      for (i = 0, len = ref.length; i < len; i++) {
        r = ref[i];
        r.call(this);
      }
      return this.output;
    }

  };

  window.TextProc2 = TextProc2;

}).call(this);
