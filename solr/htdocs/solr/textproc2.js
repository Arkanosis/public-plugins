// Generated by CoffeeScript 1.5.0
(function() {
  var TextProc2;

  TextProc2 = (function() {

    function TextProc2() {
      this.candidates = {};
      this.values = {};
      this.running = [];
    }

    TextProc2.prototype.candidate = function(key, value, priority) {
      var _ref, _ref1;
      if (priority == null) {
        priority = (_ref = (_ref1 = this.candidates[key]) != null ? _ref1.priority : void 0) != null ? _ref : 0;
      }
      if (value == null) {
        return;
      }
      if ((this.candidates[key] == null) || this.candidates[key].priority < priority) {
        return this.candidates[key] = {
          value: value,
          priority: priority
        };
      }
    };

    TextProc2.prototype.best = function(key) {
      var _ref;
      return (_ref = this.candidates[key]) != null ? _ref.value : void 0;
    };

    TextProc2.prototype.add_value = function(key, value, position) {
      if (!this.values[key]) {
        this.values[key] = [];
      }
      return this.values[key].push({
        value: value,
        position: position
      });
    };

    TextProc2.prototype.all_values = function(key) {
      return this.values[key];
    };

    TextProc2.prototype.send = function(key, value) {
      return this.output[key] = value;
    };

    TextProc2.prototype.register = function(prio, method) {
      return this.running.push({
        prio: prio,
        method: method
      });
    };

    TextProc2.prototype._sort_running = function() {
      var r;
      return (function() {
        var _i, _len, _ref, _results;
        _ref = this.running.sort(function(a, b) {
          return a.prio - b.prio;
        });
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          r = _ref[_i];
          _results.push(r.method);
        }
        return _results;
      }).call(this);
    };

    TextProc2.prototype.run = function(data) {
      var k, r, v, _i, _len, _ref;
      this.candidates = {};
      this.values = {};
      this.output = {};
      for (k in data) {
        v = data[k];
        this.candidate(k, v, 0);
      }
      _ref = this._sort_running();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        r = _ref[_i];
        r.call(this);
      }
      return this.output;
    };

    return TextProc2;

  })();

  window.TextProc2 = TextProc2;

}).call(this);
