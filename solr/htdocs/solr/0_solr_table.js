// Generated by CoffeeScript 1.5.0
(function() {
  var Source, Table, TableHolder, TableState, TestSource, _clone_array, _clone_object, _div,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _div = function(klass) {
    return $("<div class='" + klass + "'></div>");
  };

  _clone_array = function(a) {
    return $.extend(true, [], a);
  };

  _clone_object = function(a) {
    return $.extend(true, {}, a);
  };

  Source = (function() {

    function Source() {}

    Source.prototype.init = function(cols) {
      var i, _i, _ref, _results;
      this.cols = $.extend(true, [], cols);
      this.colidx = [];
      _results = [];
      for (i = _i = 0, _ref = this.cols.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        _results.push(this.colidx[this.cols[i].key] = i);
      }
      return _results;
    };

    Source.prototype.columns = function() {
      return this.cols;
    };

    Source.prototype._numcol_filter = function(filter) {
      var k, out, r, _i, _len;
      out = _clone_array(filter);
      for (_i = 0, _len = out.length; _i < _len; _i++) {
        r = out[_i];
        r.columns = (function() {
          var _j, _len1, _ref, _results;
          _ref = r.columns;
          _results = [];
          for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
            k = _ref[_j];
            _results.push(this.colidx[k]);
          }
          return _results;
        }).call(this);
      }
      return out;
    };

    Source.prototype._numcol_order = function(order) {
      var out, r, _i, _len;
      out = _clone_array(order);
      for (_i = 0, _len = out.length; _i < _len; _i++) {
        r = out[_i];
        r.column = this.colidx[r.column];
      }
      return out;
    };

    Source.prototype._numcol_cols = function(cols) {
      var out, x, _i, _len, _results;
      out = _clone_array(cols);
      _results = [];
      for (_i = 0, _len = out.length; _i < _len; _i++) {
        x = out[_i];
        _results.push(this.colidx[x]);
      }
      return _results;
    };

    Source.prototype._post_sort = function(data, order) {
      return data.sort(function(a, b) {
        var s, x, _i, _len;
        for (_i = 0, _len = order.length; _i < _len; _i++) {
          s = order[_i];
          x = ("" + a[s.column]).localeCompare(b[s.column]);
          if (x) {
            return x * s.order;
          }
        }
        return 0;
      });
    };

    return Source;

  })();

  TestSource = (function(_super) {

    __extends(TestSource, _super);

    TestSource.prototype._x = function(s, i) {
      return s.substr(i % s.length, 1);
    };

    TestSource.prototype._m = function(s, i) {
      var out, x, _i;
      out = '';
      for (x = _i = 0; 0 <= i ? _i <= i : _i >= i; x = 0 <= i ? ++_i : --_i) {
        out = out.concat(s);
      }
      return out;
    };

    function TestSource() {
      var i, _i;
      this.data = [];
      for (i = _i = 0; _i <= 1000; i = ++_i) {
        this.data.push([i, this._x("ABCDEFGHIJKLMNOPQRSTUVWXYZ", i), this._m("x", i % 7), this._x("ZYX", i), this._x("ABCDE", i)]);
      }
      this.init([
        {
          key: 'first',
          name: 'First',
          width: 10
        }, {
          key: 'second',
          name: 'Second',
          width: 40
        }, {
          key: 'third',
          name: 'Third',
          width: 20
        }, {
          key: 'fourth',
          name: 'Fourth',
          width: 10
        }, {
          key: 'fifth',
          name: 'Fifth',
          width: 20,
          nosort: 1
        }
      ]);
    }

    TestSource.prototype.chunk_size = function() {
      return 10;
    };

    TestSource.prototype.get = function(filter, cols, order, start, len, more) {
      var c, d, f, k, ok, out, pass, r, rows, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1;
      filter = this._numcol_filter(filter);
      order = this._numcol_order(order);
      cols = this._numcol_cols(cols);
      rows = [];
      _ref = this.data;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        d = _ref[_i];
        ok = 1;
        for (_j = 0, _len1 = filter.length; _j < _len1; _j++) {
          f = filter[_j];
          pass = 0;
          _ref1 = f.columns;
          for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
            c = _ref1[_k];
            if (("" + d[c]).indexOf(f.value) !== -1) {
              pass = 1;
            }
          }
          if (!pass) {
            ok = 0;
          }
        }
        if (ok) {
          rows.push(d);
        }
      }
      rows = this._post_sort(rows, order);
      if (len) {
        rows = rows.splice(start, len);
      } else {
        rows = rows.splice(start, rows.length - start - 1);
      }
      out = [];
      for (_l = 0, _len3 = rows.length; _l < _len3; _l++) {
        r = rows[_l];
        out.push((function() {
          var _len4, _m, _results;
          _results = [];
          for (_m = 0, _len4 = cols.length; _m < _len4; _m++) {
            k = cols[_m];
            _results.push(r[k]);
          }
          return _results;
        })());
      }
      return more.call(this, out);
    };

    return TestSource;

  })(Source);

  TableState = (function() {

    function TableState(source, el) {
      var c, scols, _i, _len,
        _this = this;
      this.source = source;
      scols = this.source.columns();
      this._filter = [];
      this._order = [];
      this._colkey = {};
      for (_i = 0, _len = scols.length; _i < _len; _i++) {
        c = scols[_i];
        this._colkey[c.key] = c;
      }
      this._sortkey = {};
      this.el = $(el);
      this.el.data('columns', (function() {
        var _j, _len1, _results;
        _results = [];
        for (_j = 0, _len1 = scols.length; _j < _len1; _j++) {
          c = scols[_j];
          _results.push(c.key);
        }
        return _results;
      })());
      this.el.data('pagesize', 10);
      this.el.on('fix_widths', function() {
        var col, columns, i, perc_per_unit, total, units_used, _j, _k, _l, _len1, _len2, _len3, _m, _results;
        columns = _this.el.data('columns');
        for (_j = 0, _len1 = columns.length; _j < _len1; _j++) {
          c = columns[_j];
          if (_this._colkey[c].width === 0) {
            _this._colkey[c].width = 1;
          }
        }
        units_used = 0;
        for (_k = 0, _len2 = columns.length; _k < _len2; _k++) {
          c = columns[_k];
          units_used += _this._colkey[c].width;
        }
        perc_per_unit = 100 / units_used;
        total = 0;
        for (_l = 0, _len3 = columns.length; _l < _len3; _l++) {
          c = columns[_l];
          _this._colkey[c].total = _this._colkey[c].width * perc_per_unit + total;
          total += _this._colkey[c].width * perc_per_unit;
          _this._colkey[c].percent = 0;
        }
        col = 0;
        _results = [];
        for (i = _m = 0; _m <= 99; i = ++_m) {
          if (i > _this._colkey[columns[col]].total && col < columns.length) {
            col++;
          }
          _results.push(_this._colkey[columns[col]].percent++);
        }
        return _results;
      });
    }

    TableState.prototype.e = function() {
      return this.el;
    };

    TableState.prototype._update_sortkey = function() {
      var r, _i, _len, _ref, _results;
      this._sortkey = {};
      _ref = this._order;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        r = _ref[_i];
        _results.push(this._sortkey[r.column] = r.order);
      }
      return _results;
    };

    TableState.prototype.filter = function(f) {
      if (f != null) {
        this._filter = f;
      }
      return this._filter;
    };

    TableState.prototype.columns = function() {
      return this.el.data('columns');
    };

    TableState.prototype.order = function(r) {
      if (r != null) {
        this._order = r;
        this._update_sortkey();
      }
      return this._order;
    };

    TableState.prototype.page = function(p) {
      var _ref;
      if (p != null) {
        this.el.data('page', p);
      }
      return (_ref = this.el.data('page')) != null ? _ref : 1;
    };

    TableState.prototype.pagesize = function() {
      return this.el.data('pagesize');
    };

    TableState.prototype.start = function() {
      return (this.page() - 1) * this.pagesize();
    };

    TableState.prototype.coldata = function() {
      var k, _i, _len, _ref, _results;
      _ref = this.el.data('columns');
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        k = _ref[_i];
        _results.push(this._colkey[k]);
      }
      return _results;
    };

    TableState.prototype.sortkey = function(k) {
      return this._sortkey[k];
    };

    TableState.prototype.associate = function(table) {
      this.table = table;
    };

    TableState.prototype.set = function() {
      return this.table.render();
    };

    return TableState;

  })();

  TableHolder = (function() {

    function TableHolder(templates, source, state, options) {
      this.templates = templates;
      this.source = source;
      this.state = state;
      this.options = options != null ? options : {};
      this.state.associate(this);
    }

    TableHolder.prototype.get_all_data = function(callback) {
      var out;
      out = {
        rows: []
      };
      return this.get_some_data(0, 100, out, callback);
    };

    TableHolder.prototype.get_some_data = function(start, num, acc, callback) {
      var _this = this;
      return this.get_data(start, num, function(data) {
        if (data.rows.length === 0 || ((_this.max != null) && start + data.rows.length > _this.max)) {
          return callback(acc);
        } else {
          if ((data.cols != null) && (acc.cols == null)) {
            acc.cols = data.cols;
          }
          acc.rows = acc.rows.concat(data.rows);
          return _this.get_some_data(start + data.rows.length, num, acc, callback);
        }
      });
    };

    TableHolder.prototype.get_data = function(start, num, callback) {
      return this.source.get(this.state.filter(), this.state.columns(), this.state.order(), start, num, callback, true);
    };

    TableHolder.prototype.transmit_data = function(el, fn, data) {
      var $form, c, r, row, rows, _i, _j, _len, _len1, _ref, _ref1;
      rows = [];
      rows.push(data.cols);
      _ref = data.rows;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        r = _ref[_i];
        row = [];
        _ref1 = data.cols;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          c = _ref1[_j];
          if (c === 'id_with_url') {
            r[c] = r['id'];
          }
          row.push(r[c]);
        }
        rows.push(row);
      }
      $form = $('.t_download_export', el);
      $('.filename', $form).val(fn);
      $('.data', $form).val(JSON.stringify(rows));
      $('.expopts', $form).val(JSON.stringify((function() {
        var _k, _len2, _ref2, _results;
        _ref2 = data.cols;
        _results = [];
        for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
          c = _ref2[_k];
          _results.push({});
        }
        return _results;
      })()));
      return $form.trigger('submit');
    };

    TableHolder.prototype.generate_model = function(extra) {
      var model,
        _this = this;
      model = {
        table_ready: function(el, data) {
          return _this.collect_view_model(el, data);
        },
        state: this.state,
        download_curpage: function(el, fn) {
          return _this.get_data(_this.state.start(), _this.state.pagesize(), function(data) {
            return _this.transmit_data(el, fn, data);
          });
        },
        download_all: function(el, fn) {
          return _this.get_all_data(function(data) {
            return _this.transmit_data(el, fn, data);
          });
        }
      };
      return model;
    };

    TableHolder.prototype.collect_view_model = function(el, data) {
      return this.outer = el;
    };

    TableHolder.prototype.element = function() {
      return this.outer;
    };

    TableHolder.prototype.draw_table = function() {
      var table;
      table = new Table(this);
      return table.render();
    };

    TableHolder.prototype.table_ready = function(html) {
      var table;
      table = $('.search_table_proper', this.outer);
      table.empty();
      return table.append(html);
    };

    TableHolder.prototype.data_actions = function(data) {
      if (this.options.update != null) {
        return this.options.update.call(this, data);
      }
    };

    return TableHolder;

  })();

  Table = (function() {
    var _idx;

    _idx = 0;

    Table.prototype.new_idx = function() {
      return this.idx = _idx++;
    };

    function Table(holder) {
      var _ref,
        _this = this;
      this.holder = holder;
      this.multisort = (_ref = this.holder.options.multisort) != null ? _ref : true;
      this.last_scroll_fire = 0;
      this.artificial_seq = 1;
      $(window).scroll(function() {
        return _this.scroll_event(0);
      });
    }

    Table.prototype.scroll_event = function(artificial) {
      var now,
        _this = this;
      now = new Date().getTime();
      if (artificial !== 0 && this.artificial_seq !== artificial) {
        return;
      }
      if (now > this.last_scroll_fire + 500) {
        this.last_scroll_fire = now;
        return this.did_scroll();
      } else {
        if (artificial === 0) {
          if (this.timer) {
            clearTimeout(this.timer);
          }
          return this.timer = setTimeout((function() {
            return _this.scroll_event(++_this.artificial_seq);
          }), 500);
        }
      }
    };

    Table.prototype.did_scroll = function() {
      return this.reinstate_chunks();
    };

    Table.prototype.reinstate_chunks = function() {
      var count, end, height, start, table, targets, top,
        _this = this;
      top = $(window).scrollTop();
      height = $(window).height();
      start = top - height;
      end = top + 2 * height;
      table = this;
      count = 0;
      targets = [];
      $('.search_table_buffer').each(function() {
        var buffer, buffer_end, buffer_start;
        buffer = $(this);
        buffer_start = buffer.offset().top;
        buffer_end = buffer_start + buffer.height();
        if (!(buffer_start > end || buffer_end < start)) {
          return targets.push(buffer);
        }
      });
      if (targets.length) {
        return table.reinstate_chunk(targets, 0, function() {
          if (targets.length) {
            return _this.reinstate_chunks();
          }
        });
      }
    };

    Table.prototype.render_head = function(t_data, data, first) {
      var c, dir, state, _i, _len, _ref;
      t_data.headings = {};
      _ref = this.holder.state.coldata();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        c = _ref[_i];
        state = 'off';
        dir = this.holder.state.sortkey(c.key);
        if (dir != null) {
          state = (dir > 0 ? "asc" : "desc");
        }
        if (c.nosort) {
          state = '';
        }
        t_data.headings[c.key] = {
          text: c != null ? c.name : void 0,
          state: state,
          key: c.key,
          dir: dir
        };
      }
      return t_data.first = first;
    };

    Table.prototype.render_tail = function(table, data) {};

    Table.prototype.render_row = function(data) {
      this.stripe = !this.stripe;
      return {
        cols: data,
        stripe: this.stripe
      };
    };

    Table.prototype.reinstate_chunk = function(targets, i, rest) {
      var buffer, first, idx, last, num, start,
        _this = this;
      buffer = targets[i];
      start = buffer.data('start');
      num = buffer.data('num');
      idx = buffer.data('idx');
      first = buffer.data('first');
      last = buffer.data('last');
      return this.get_data(start, num, function(data) {
        if (idx !== _this.idx) {
          return;
        }
        return _this.render_chunk(data, first, last, false, buffer, function(table) {
          if (i < targets.length - 1) {
            return _this.reinstate_chunk(targets, i + 1, rest);
          } else {
            return rest();
          }
        });
      });
    };

    Table.prototype.fake_chunk = function(height, start, num, idx, first, last) {
      return _div('search_table_buffer').height(height).data('start', start).data('num', num).data('idx', idx).data('first', first).data('last', last);
    };

    Table.prototype.hide_chunk = function(table, height, start, num, idx, first, last) {
      return table.replaceWith(this.fake_chunk(height, start, num, idx, first, last));
    };

    Table.prototype.hide_distant_chunks = function() {
      var distant, end, height, start, t, top, _i, _len, _results;
      top = $(window).scrollTop();
      height = $(window).height();
      start = top - height;
      end = top + 2 * height;
      distant = [];
      this.container.find('.chunk').each(function() {
        var first, idx, last, num, table, table_end, table_start;
        table = $(this);
        table_start = table.offset().top;
        table_end = table_start + table.height();
        if (table_start > end || table_end < start) {
          height = table.outerHeight(true);
          start = table.data('start');
          num = table.data('num');
          idx = table.data('idx');
          first = table.data('first');
          last = table.data('last');
          return distant.push([table, height, start, num, idx, first, last]);
        }
      });
      _results = [];
      for (_i = 0, _len = distant.length; _i < _len; _i++) {
        t = distant[_i];
        _results.push(this.hide_chunk(t[0], t[1], t[2], t[3], t[4], t[5], t[6]));
      }
      return _results;
    };

    Table.prototype.markup_chunk = function(table, start, num, idx, first, last) {
      return table.data('start', start).data('num', num).data('idx', idx).data('first', first).data('last', last);
    };

    Table.prototype.render_data = function(data, first, last) {
      var c, r, t_data, t_main, table, widths, _i, _len, _ref;
      t_data = {
        table_row: [],
        rows: [],
        cols: data.cols
      };
      widths = (function() {
        var _i, _len, _ref, _results;
        _ref = this.holder.state.coldata();
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          c = _ref[_i];
          _results.push(c.percent);
        }
        return _results;
      }).call(this);
      t_data.widths = widths;
      this.render_head(t_data, data, first);
      _ref = data.rows;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        r = _ref[_i];
        t_data.rows.push(this.render_row(r));
      }
      if (last) {
        this.render_tail(t_data, data);
      }
      t_main = this.holder.templates.generate('chunk', t_data);
      table = this;
      $('.search_table_sorter', t_main).on('click', function(e) {
        var dir, key, order, _j, _len1, _ref1;
        order = [];
        key = $(this).data('key');
        dir = $(this).data('dir');
        if (e.shiftKey && table.multisort) {
          _ref1 = this.holder.state.order();
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            e = _ref1[_j];
            if (e.column !== key) {
              order.push(e);
            }
          }
        }
        order.push({
          column: key,
          order: (dir > 0 ? -1 : 1)
        });
        table.holder.state.order(order);
        table.holder.state.set();
        return false;
      });
      return t_main;
    };

    Table.prototype.render_chunk = function(data, first, last, fire, replace, next) {
      var outer;
      if (first && fire) {
        this.holder.data_actions(data);
      }
      outer = this.render_data(data, first, last);
      if (replace != null) {
        replace.replaceWith(outer);
      } else {
        outer.appendTo(this.container);
      }
      if (first && fire) {
        this.holder.table_ready(this.container);
      }
      return next.call(this, outer);
    };

    Table.prototype.average_chunk_height = function() {
      var height, num;
      height = 0;
      num = 0;
      this.container.find('.chunk').each(function() {
        height += $(this).outerHeight(true);
        return num++;
      });
      if (num === 0) {
        num = 1;
      }
      return height / num;
    };

    Table.prototype.get_page = function(page, start, got, chunk, idx, getter, iter) {
      var toget,
        _this = this;
      if (iter == null) {
        iter = 0;
      }
      toget = (page ? page - got : chunk);
      if (toget > chunk) {
        toget = chunk;
      }
      return getter.call(this, start + got, toget, function(data) {
        var fake, got_here, more;
        if (idx !== _this.idx) {
          return;
        }
        if (data.fake != null) {
          more = !!data.fake_length;
          fake = _this.fake_chunk(data.fake_height, start + got, toget, idx, got === 0, !more);
          got_here = data.fake_length;
          fake.appendTo(_this.container);
          if (more) {
            return _this.get_page(page, start, got + got_here, chunk, idx, getter, iter + 1);
          }
        } else {
          more = !!((got + data.rows.length < page || page === 0) && data.rows.length);
          return _this.render_chunk(data, got === 0, !more, true, void 0, function(table) {
            var avg;
            _this.markup_chunk(table, start + got, toget, idx, got === 0, !more);
            got_here = data.rows.length;
            setTimeout((function() {
              return _this.hide_distant_chunks();
            }), 0);
            if (iter === 10) {
              avg = _this.average_chunk_height();
              getter = _this.fake_data(data.num, avg);
            }
            if (more) {
              return _this.get_page(page, start, got + got_here, chunk, idx, getter, iter + 1);
            }
          });
        }
      });
    };

    Table.prototype.render_main = function(idx) {
      var chunk, got, page, start;
      this.stripe = 1;
      got = 0;
      start = this.holder.state.start();
      page = this.holder.state.pagesize();
      chunk = this.holder.source.chunk_size();
      return this.get_page(this.holder.state.pagesize(), this.holder.state.start(), 0, this.holder.source.chunk_size(), idx, this.get_data);
    };

    Table.prototype.get_data = function(start, num, more) {
      return this.holder.source.get(this.holder.state.filter(), this.holder.state.columns(), this.holder.state.order(), start, num, more);
    };

    Table.prototype.fake_data = function(total, height) {
      var _this = this;
      return function(start, num, more) {
        return setTimeout(function() {
          if (start + num > total) {
            num = total - start;
          }
          if (num < 0) {
            num = 0;
          }
          return more({
            docs: [],
            num: total,
            fake: true,
            fake_length: num,
            fake_height: height
          });
        }, 0);
      };
    };

    Table.prototype.render = function() {
      if (this.container != null) {
        this.container.remove();
      }
      this.new_idx();
      this.container = _div('search_table');
      return this.render_main(this.idx);
    };

    return Table;

  })();

  window.TableSource = Source;

  window.test_source = TestSource;

  window.TableState = TableState;

  window.search_table = TableHolder;

}).call(this);
