// Generated by CoffeeScript 2.3.1
(function() {
  // Copyright [1999-2015] Wellcome Trust Sanger Institute and the EMBL-European Bioinformatics Institute
  // Copyright [2016-2018] EMBL-European Bioinformatics Institute

  // Licensed under the Apache License, Version 2.0 (the "License");
  // you may not use this file except in compliance with the License.
  // You may obtain a copy of the License at

  //     http://www.apache.org/licenses/LICENSE-2.0

  // Unless required by applicable law or agreed to in writing, software
  // distributed under the License is distributed on an "AS IS" BASIS,
  // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  // See the License for the specific language governing permissions and
  // limitations under the License.
  var in_endless_chunks;

  window.rate_limiter = function(nochange_ms, lastreq_ms) {
    var last_request, pending, timer;
    timer = null;
    last_request = null;
    pending = null;
    return function(data) {
      var d, now;
      d = $.Deferred();
      // cancel any outstanding reuqests
      if (pending) {
        pending.reject();
        clearTimeout(timer);
        pending = null;
      }
      // have we waited long enough, anyway?
      now = new Date().getTime();
      if ((!last_request) || now - last_request > lastreq_ms) {
        last_request = now;
        d.resolve(data);
      } else {
        pending = d;
        last_request = now;
        timer = setTimeout((function() {
          return d.resolve(data);
        }), nochange_ms);
      }
      return d;
    };
  };

  window.then_loop = function(fn) {
    var step;
    step = function(v) {
      var d;
      d = fn(v);
      if (d && $.isFunction(d.promise)) {
        return d.then(step);
      } else {
        return d;
      }
    };
    return step;
  };

  in_endless_chunks = function(chunksize, fn) {
    var chunk_loop;
    chunk_loop = then_loop(([got, halt]) => {
      if (halt) {
        return got;
      }
      return fn(got, chunksize).then((len) => {
        if (len === -1) {
          return [got, 1];
        } else {
          return [got + len, 0];
        }
      });
    });
    return $.Deferred().resolve([0, 0]).then(chunk_loop);
  };

  window.in_chunks = function(total, maxchunksize, fn) {
    var chunk_loop;
    if (total === -1) {
      return in_endless_chunks(maxchunksize, fn);
    }
    chunk_loop = then_loop((got) => {
      var chunksize;
      if (total - got <= 0) {
        return got;
      }
      chunksize = total - got;
      if (chunksize > maxchunksize) {
        chunksize = maxchunksize;
      }
      return fn(got, chunksize).then((len) => {
        return got + len;
      });
    });
    return $.Deferred().resolve(0).then(chunk_loop);
  };

  window.solr_current_species = function() {
    var latin, parts, path, species, url;
    url = window.location.href;
    parts = url.split('/');
    // 0 = http: ; 1 = '' ; 2 = hostpart ; 3... first url part
    path = parts[3].toLowerCase();
    latin = $.solr_config('spnames.%', path);
    if (!latin) {
      latin = path;
    }
    species = latin.toLowerCase();
    if (!$.solr_config('revspnames.%', species)) {
      return null;
    }
    return species;
  };

}).call(this);
