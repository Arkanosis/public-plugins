package EnsEMBL::ORM::Component::DbFrontend::Input;

### NAME: EnsEMBL::ORM::Component::DbFrontend::Input
### Creates an input form to add/edit a database record

### STATUS: Under development
### Note: This module should not be modified! 
### To customise an individual form, see the appropriate 
### EnsEMBL::ORM::DbFrontend module 

use strict;
use warnings;
no warnings "uninitialized";

use base qw(EnsEMBL::ORM::Component::DbFrontend);

sub _init {
  my $self = shift;
  $self->cacheable( 0 );
  $self->ajaxable(  0 );
}

sub content {
### Builds an input form for adding/editing records - elements are autogenerated
### based on the field definitions in the corresponding EnsEMBL::ORM::Rose::Object
### then modified by the configuration file for the individual frontend
  my $self = shift;

  my $data = $self->object;
  my $record = $self->object->data_object;

  my $hub = $self->hub;
  my $form_type = $hub->action;
  my $config = $self->get_frontend_config;
  my $next = $config->show_preview ? 'Preview' : 'Save';
  my $form = $self->create_form($next);
  my $fieldset = $form->add_fieldset;

  ## Get field definitions from database columns
  my $param = $self->unpack_db_table;

  ## Customise fields
  $config->modify_form($param, 'input');

  ## Add desired fields as form elements
  my @fields = ($self->object->primary_key);
  my $tracking_added = 0;
  foreach my $field (@{$config->show_fields}) {
    ## Only add tracking fields where appropriate
    if ( ($field =~ /^created/ || $field =~ /^modified/)) {
      if ($config->show_tracking && $form_type ne 'Add') {
        push @fields, $field;
        $tracking_added = 1;
      }
    }
    else {
      push @fields, $field;
    }
  }
  ## If no tracking fields have been  manually configured but show_tracking
  ## is turned on in the config, add them all here
  if (!$tracking_added && $config->show_tracking && $form_type ne 'Add') {
    push @fields, qw(created_by created_at modified_by modified_at);
  }

  ## Now create the form parameters
  foreach my $name (@fields) {
    my $p = $param->{$name};
    if ($record) {
      if ($name eq 'created_by' || $name eq 'modified_by') {
        ## Format 'tracking' fields nicely
        $p->{'value'} = $self->get_user_name($record->$name);
        if ($name eq 'created_by' && $record->created_by) {
          $form->add_element('type' => 'Hidden', 'name' => 'created_by',
              'value' => $record->created_by);
        }
      }
      elsif ($name eq 'created_at' || $name eq 'modified_at') {
        $p->{'value'} = $self->get_pretty_date($record->$name);
        if ($name eq 'created_at' && $record->created_at) {
          $form->add_element('type' => 'Hidden', 'name' => 'created_at',
              'value' => $record->created_at);
        }
      }
      else {
        $p->{'value'} = $record->$name;
      }
    }
    if ($p->{'is_primary_key'}) {
      if ($config->show_primary_key) {
        $fieldset->add_element(%$p);
      }
      if ($form_type ne 'Add') {
        ## Make sure to pass the primary key!!
        $p->{'type'} = 'Hidden';
        $fieldset->add_element(%$p);
      }
    }
    else {
      $fieldset->add_element(%$p);
    }
  }
  $form->add_element('type' => 'Hidden', 'name' => 'form_type', 'value' => $form_type);
  $form->add_button('type' => 'Submit', 'name' => 'submit', 'value' => $next);

  return $form->render;
}

1;
